/*This program has to find all vertexes with 3 bridges*/

#include <iostream>;
#include <vector>
#include <cmath>
	
using namespace std;
	
vector<int>* G; bool* used; int timer;
void dfs(int v, int p, int* &tin, int* &fup, int* &bridges, int N)
	{
		used[v] = true;
		tin[v] = fup[v] = timer++;
		for (size_t i=0; i < G[v].size(); ++i)
	    {
			int to = G[v][i];
			if (to == p)  continue;
			if (used[to])
				fup[v] = min (fup[v], tin[to]);
			else
	        {
				dfs(to, v, tin, fup, bridges, N);
				fup[v] = min (fup[v], fup[to]);
				if (fup[to] > tin[v])
				{
				    bridges[v]++;
				    bridges[to]++;
				}
			}
		}
	}
	
	void find_bridges(int*& tin, int*& fup, int*& bridges, int N)
	{
		timer = 0;
		for (int i = 0; i < N; ++i)
			used[i] = false;
		for (int i = 0; i < N; ++i)
			if (!used[i])
				dfs(i, -1, tin, fup, bridges, N);
	}
	
	int main()
	{
	    int N;
      cout >> "Please enter the total number of vetrexes" << endl;
	    cin >> N;
	    int* tin = new int[N];
	    int* fup = new int[N];
	    int* bridges = new int[N];
	    used = new bool[N];
	    G = new vector<int>[N];
	    int x;
      cout >> "Now enter the adjacency list for a vertex. If you want to move to the next vertex, enter -1" << endl; 
	    for (int i = 0; i < N; ++i)
	    {
	        while (0 == 0)  //the infinite cycle
	        {
	            cin >> x;
	            if (x == -1) break;
	            G[i].push_back(x);
	        }
	    };
      
	    find_bridges(tin, fup, bridges, N);
	    for (int i = 0; i < N; ++i)
	        if (bridges[i] == 3)
	            cout << i << endl;
	    return 0;
	}
